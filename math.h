//
// math.h     -- All variables and function declarations needed to factor P, P-1, and
//               perform Jacobi, Multiplicative Order, and Pollard Rho
//
//            -- dependent on limits.h (automatically included if not flagged as included)
// $RCSfile: math.h,v $
//
// $Date: 2013/12/11 22:08:00 $
//
// $Author: chuck $
//
// $Id: math.h,v 1.1 2013/12/11 22:08:00 chuck Exp chuck $
//
//
// ChangeLog:
//
// $Log: math.h,v $
// Revision 1.1  2013/12/11 22:08:00  chuck
// Initial revision
//
//
//



#ifndef  _havemathh_
#define  _havemathh_

// get limits.h if needed
#ifndef  _havelimitsh_
#include "limits.h"
#endif

  #define   MAXPRIMES     7000   // How many primes are needed to hold primes < 2^PRIMEBITS
  #define   MAXFACTORS    8192   // How many factors will we hold and use for calculations

  #define   PRIMEBITS       16   // Must be a power of 2.  Increasing gets costly fast!
  #define   MAXPRIMEBITS    24   // Don't allow more than 2^MAXPRIMEBITS to be requested.

  // #define   PRIMESLIMIT  65536   // 2^16 for now.

  // As each value is factored, it's prime and corresponding exponent are stored in
  // an array of type PrimeFactor for subsequent expansion into the Factors list

  typedef struct {
    uint64_t p;
    int      e;
  } PrimeFactor;


  // global storage (allocated and generated by Eratosthenes) for primes and how many
  uint64_t  *Primes;
  int        NumPrimes;


  // Prototypes
  void eratosthenes();

  int  getprimefactors(uint64_t, PrimeFactor *);

  int  getfactors(uint64_t, uint64_t *);

  uint64_t order(int, uint64_t);


#endif // _havemathh_
