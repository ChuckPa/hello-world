//
//  signals.c -- signal handling functions
//
//               Signals are received by the interrupts which set flags.
//               Flags are checked at the proper time to perform their respective actions
//               (when it's safe to perform the needed action)
//
//
// $RCSfile: signals.c,v $
//
// $Date: 2013/12/02 19:16:57 $
//
// $Author: chuck $
//
// $Id: signals.c,v 1.2 2013/12/02 19:16:57 chuck Exp $
//
//
// ChangeLog:
//
// $Log: signals.c,v $
// Revision 1.2  2013/12/02 19:16:57  chuck
// added rcs_file_version identification string
//
// Revision 1.1  2013/11/30 18:11:40  chuck
// Initial revision
//
//
static char *rcs_file_verson = "$Id: signals.c,v 1.2 2013/12/02 19:16:57 chuck Exp $";
//

// Global Includes
#include <stdio.h>     // notice:  Included to satisfy requirements of sieve.h ONLY.  unused
#include <signal.h>

// Local Includes
#include "limits.h"
#include "sieve.h"
#include "signals.h"




// Handle alarms generated by the alarm() callback signal.   'ticks' are currently 1/min
void TickHandler(int signum)
{

  // include this invocation in the count
  AutosaveInterval++;

  // Is it time to perform an automatic save?
  if (AutosaveInterval >= Autosave) {

    // Assert that we need the save
    NeedSave = 1;

    // Reset the counter
    AutosaveInterval = 0;

  } else {

    // No, simply update the stats
    NeedStats = 1;

  }

  // check again in another minute
  alarm(60);

}


// Handle the Ctrl-C and Ctrl-\ (intr & quit) by setting ExitSieve
// Ctr-C, and other hard interrupts handler
void QuitHandler(int signum)
{

  int   i;
  int   count = 0;

  ExitSieve = 1;

}


// Initialize all signal handling
void InitSignals(void)
{
  /* SIGUSR1 and SIGUSR2 are initialised earlier (if they exist). */

  if (signal(SIGINT,QuitHandler) == SIG_IGN)
    signal(SIGINT,SIG_IGN);
  if (signal(SIGTERM,QuitHandler) == SIG_IGN)
    signal(SIGTERM,SIG_IGN);

// The autosave/stats update 'Tick' handler
  if (signal(SIGALRM,TickHandler) == SIG_IGN)
    signal(SIGALRM,SIG_IGN);

#ifdef SIGHUP
  if (signal(SIGHUP,QuitHandler) == SIG_IGN)
    signal(SIGHUP,SIG_IGN);
#endif
#if HAVE_FORK
  if (num_children > 0)
    if (signal(SIGPIPE,QuitHandler) == SIG_IGN)
      signal(SIGPIPE,SIG_IGN);
#endif

}

